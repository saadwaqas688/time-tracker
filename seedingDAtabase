package org.example;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class SeedingDataBase {

    private static final String DB_URL = "jdbc:sqlite:current.db"; // Update this path

    public static void main(String[] args) {
        SeedingDataBase seeder = new SeedingDataBase();
        seeder.initializeDatabase();
        seeder.insertDummyData();
    }

    public void initializeDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {

            // Create projects table
            String createProjectsTable = "CREATE TABLE IF NOT EXISTS projects (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "name TEXT NOT NULL," +
                    "description TEXT)";
            stmt.execute(createProjectsTable);

            // Create tasks table
            String createTasksTable = "CREATE TABLE IF NOT EXISTS tasks (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "projectId INTEGER NOT NULL," +
                    "name TEXT NOT NULL," +
                    "description TEXT," +
                    "createDate TEXT," +
                    "status TEXT," +
                    "timeStamp INTEGER," +
                    "isRunning INTEGER," +
                    "timeSpent INTEGER," +
                    "FOREIGN KEY(projectId) REFERENCES projects(id))";
            stmt.execute(createTasksTable);

            // Create users table
            String createUsersTable = "CREATE TABLE IF NOT EXISTS users (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "firstName TEXT NOT NULL," +
                    "lastName TEXT NOT NULL," +
                    "email TEXT NOT NULL," +
                    "password TEXT NOT NULL)";
            stmt.execute(createUsersTable);

            // Create user_tasks table
            String createUserTasksTable = "CREATE TABLE IF NOT EXISTS user_tasks (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "userId INTEGER NOT NULL," +
                    "taskId INTEGER NOT NULL," +
                    "FOREIGN KEY(userId) REFERENCES users(id)," +
                    "FOREIGN KEY(taskId) REFERENCES tasks(id))";
            stmt.execute(createUserTasksTable);

            // Create user_projects table
            String createUserProjectsTable = "CREATE TABLE IF NOT EXISTS user_projects (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "userId INTEGER NOT NULL," +
                    "projectId INTEGER NOT NULL," +
                    "isSelected INTEGER," +
                    "FOREIGN KEY(userId) REFERENCES users(id)," +
                    "FOREIGN KEY(projectId) REFERENCES projects(id))";
            stmt.execute(createUserProjectsTable);

            System.out.println("Tables created successfully.");

        } catch (SQLException e) {
            System.err.println("Error creating tables: " + e.getMessage());
        }
    }

    public void insertDummyData() {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {

            // Insert users
            String insertUsers = "INSERT INTO users (firstName, lastName, email, password) VALUES (?, ?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertUsers)) {
                pstmt.setString(1, "User1");
                pstmt.setString(2, "Last1");
                pstmt.setString(3, "user1@example.com");
                pstmt.setString(4, "password1");
                pstmt.addBatch();

                pstmt.setString(1, "User2");
                pstmt.setString(2, "Last2");
                pstmt.setString(3, "user2@example.com");
                pstmt.setString(4, "password2");
                pstmt.addBatch();

                pstmt.setString(1, "User3");
                pstmt.setString(2, "Last3");
                pstmt.setString(3, "user3@example.com");
                pstmt.setString(4, "password3");
                pstmt.addBatch();

                pstmt.executeBatch();
            }

            // Insert projects
            String insertProjects = "INSERT INTO projects (name, description) VALUES (?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertProjects)) {
                for (int i = 1; i <= 5; i++) {
                    pstmt.setString(1, "Project " + i);
                    pstmt.setString(2, "Description for project " + i);
                    pstmt.addBatch();
                }
                pstmt.executeBatch();
            }

            // Insert tasks
            String insertTasks = "INSERT INTO tasks (projectId, name, description, createDate, status, timeStamp, isRunning, timeSpent) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertTasks)) {
                for (int projectId = 1; projectId <= 5; projectId++) {
                    for (int taskId = 1; taskId <= 5; taskId++) {
                        pstmt.setInt(1, projectId);
                        pstmt.setString(2, "Task " + taskId + " for project " + projectId);
                        pstmt.setString(3, "Description for task " + taskId);
                        pstmt.setString(4, "2024-01-01");
                        pstmt.setString(5, "Todo");
                        pstmt.setInt(6, 0);
                        pstmt.setInt(7, 0);
                        pstmt.setInt(8, 0);
                        pstmt.addBatch();
                    }
                }
                pstmt.executeBatch();
            }

            // Assign projects to users
            String insertUserProjects = "INSERT INTO user_projects (userId, projectId, isSelected) VALUES (?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertUserProjects)) {
                // User1 assigned to Project 1, 2, 3
                pstmt.setInt(1, 1);
                pstmt.setInt(2, 1);
                pstmt.setInt(3, 0); // Set isSelected to 0 for initial data
                pstmt.addBatch();
                pstmt.setInt(1, 1);
                pstmt.setInt(2, 2);
                pstmt.setInt(3, 0);
                pstmt.addBatch();
                pstmt.setInt(1, 1);
                pstmt.setInt(2, 3);
                pstmt.setInt(3, 0);
                pstmt.addBatch();

                // User2 assigned to Project 4
                pstmt.setInt(1, 2);
                pstmt.setInt(2, 4);
                pstmt.setInt(3, 0);
                pstmt.addBatch();

                // User3 assigned to Project 5
                pstmt.setInt(1, 3);
                pstmt.setInt(2, 5);
                pstmt.setInt(3, 0);
                pstmt.addBatch();

                pstmt.executeBatch();
            }

            System.out.println("Dummy data inserted successfully.");

        } catch (SQLException e) {
            System.err.println("Error inserting dummy data: " + e.getMessage());
        }
    }
}
