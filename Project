    private void startTimer(Task task) {
        stopTimer();  // Stop any existing timer
        currentTask = task;
        currentProject = projects.stream().filter(p -> p.getId().equals(selectedProjectId)).findFirst().orElse(null);
        currentTaskDetailsLabel.setText( currentTask.getName() + " - Time Spent: " + currentTask.getTimeSpent());
                // currentTaskLabel.setText(currentProject.getName());

        // Determine the row index of the current task
        currentTaskRowIndex = -1;
        for (int i = 0; i < taskTable.getRowCount(); i++) {
            Task t = (Task) taskTable.getValueAt(i, 0); // Assuming the task is in the first column
            if (t.equals(currentTask)) {
                currentTaskRowIndex = i;
                break;
            }
        }

        // startButton.setEnabled(false);
        // stopButton.setEnabled(true);

        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateTimeSpent();
                    }
                });
            }
        }, 1000, 1000);
    }

    private void stopTimer() {
        if (timer != null) {
            timer.cancel();
        }
        currentTask = null;
        currentProject = null;
        currentTaskDetailsLabel.setText("No task running");
        // startButton.setEnabled(true);
        // stopButton.setEnabled(false);
        showTasks(selectedProjectId);  // Refresh task list to remove highlighting
    }