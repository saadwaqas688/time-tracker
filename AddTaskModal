package org.example;

import org.json.JSONObject;
import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class AddTaskModal extends JDialog {
    private static final Color SECONDARY_COLOR = new Color(0, 36, 51);
    private static final Color PRIMARY_COLOR = new Color(3, 50, 70);
    private static final Color PRIMARY_TEXT_COLOR = new Color(255, 255, 255);
    private static final Color WARNING_COLOR = new Color(244, 162, 97);

    private JTextField taskNameField;
    private JTextArea descriptionArea;
    private JComboBox<String> statusDropdown;

    private String projectId;
    private String status;
    private Task createdTask;

    public AddTaskModal(Frame owner, String projectId) {
        super(owner, "Add New Task", true);
        this.projectId = projectId;
        this.status = "Failed";
        this.createdTask = null;

        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBackground(SECONDARY_COLOR);
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 0, 10, 0);
        gbc.gridx = 0;

        // Task Name Field
        JLabel taskNameLabel = new JLabel("Task Name:");
        taskNameLabel.setForeground(PRIMARY_TEXT_COLOR);
        gbc.gridy = 0;
        mainPanel.add(taskNameLabel, gbc);

        taskNameField = new JTextField();
        taskNameField.setBackground(PRIMARY_COLOR);
        taskNameField.setForeground(PRIMARY_TEXT_COLOR);
        taskNameField.setBorder(createPaddingBorder(10, 10, 10, 10));
        taskNameField.setPreferredSize(new Dimension(300, 50));
        gbc.gridy = 1;
        mainPanel.add(taskNameField, gbc);

        // Description Field
        JLabel descriptionLabel = new JLabel("Description:");
        descriptionLabel.setForeground(PRIMARY_TEXT_COLOR);
        gbc.gridy = 2;
        mainPanel.add(descriptionLabel, gbc);

        descriptionArea = new JTextArea();
        descriptionArea.setBackground(PRIMARY_COLOR);
        descriptionArea.setForeground(PRIMARY_TEXT_COLOR);
        descriptionArea.setBorder(createPaddingBorder(10, 10, 10, 10));
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        descriptionArea.setPreferredSize(new Dimension(300, 100));
        gbc.gridy = 3;
        mainPanel.add(new JScrollPane(descriptionArea), gbc);

        // Status Dropdown
        JLabel statusLabel = new JLabel("Select Status:");
        statusLabel.setForeground(PRIMARY_TEXT_COLOR);
        gbc.gridy = 4;
        mainPanel.add(statusLabel, gbc);

        String[] statusOptions = {"Select", "Completed", "To Do"};
        statusDropdown = new JComboBox<>(statusOptions);
        statusDropdown.setBackground(PRIMARY_COLOR);
        statusDropdown.setForeground(PRIMARY_TEXT_COLOR);
        statusDropdown.setBorder(BorderFactory.createEmptyBorder());
        statusDropdown.setPreferredSize(new Dimension(300, 50));
        statusDropdown.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel renderer = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                renderer.setBorder(BorderFactory.createEmptyBorder(5, 15, 5, 15));
                renderer.setForeground(PRIMARY_TEXT_COLOR);
                renderer.setBackground(PRIMARY_COLOR);
                return renderer;
            }
        });
        gbc.gridy = 5;
        mainPanel.add(statusDropdown, gbc);

        // Button Panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(SECONDARY_COLOR);
        buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBackground(PRIMARY_COLOR);
        cancelButton.setForeground(PRIMARY_TEXT_COLOR);
        cancelButton.setOpaque(true);
        cancelButton.setBorder(BorderFactory.createEmptyBorder());
        cancelButton.setPreferredSize(new Dimension(100, 35));
        cancelButton.addActionListener(e -> dispose());

        JButton addButton = new JButton("Add");
        addButton.setBackground(WARNING_COLOR);
        addButton.setForeground(PRIMARY_TEXT_COLOR);
        addButton.setOpaque(true);
        addButton.setBorder(BorderFactory.createEmptyBorder());
        addButton.setPreferredSize(new Dimension(100, 35));
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleAddButtonClick();
            }
        });

        buttonPanel.add(cancelButton);
        buttonPanel.add(addButton);

        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.EAST;
        mainPanel.add(buttonPanel, gbc);

        getContentPane().add(mainPanel);
        setSize(400, 500);
        setLocationRelativeTo(owner);
    }

    // Create a padding border
    private Border createPaddingBorder(int top, int left, int bottom, int right) {
        return BorderFactory.createCompoundBorder(
                BorderFactory.createEmptyBorder(top, left, bottom, right),
                BorderFactory.createLineBorder(new Color(0, 0, 0, 0), 1)
        );
    }

    // Handle the Add button click
    private void handleAddButtonClick() {
        String taskName = taskNameField.getText().trim();
        String description = descriptionArea.getText().trim();
        String status = (String) statusDropdown.getSelectedItem();

        if (taskName.isEmpty() || "Select".equals(status)) {
            JOptionPane.showMessageDialog(this, "Please fill out all fields correctly.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Construct the JSON payload
        String jsonPayload = String.format("{\"projectId\":\"%s\", \"name\":\"%s\", \"description\":\"%s\", \"status\":\"%s\"}",
                projectId, taskName, description, status);

        // Send the POST request
        String apiUrl = "http://localhost:3000/addTask";
        JSONObject response = HttpUtil.sendPostRequest(apiUrl, jsonPayload);

        // Handle the response to extract the created task
        Task newTask = null;
        if (response != null && response.has("success") && response.getBoolean("success")) {
            try {
                if (response.has("task")) {
                    JSONObject taskJson = response.getJSONObject("task");
                    newTask = parseTaskFromJson(taskJson);
                    this.status = "Success";
                    createdTask = newTask;
                    JOptionPane.showMessageDialog(this, "Task added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                }
            } catch (Exception e) {
                this.status = "Failed";
                JOptionPane.showMessageDialog(this, "Failed to parse task from response.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            this.status = "Failed";
            JOptionPane.showMessageDialog(this, "Failed to add task.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Parse task from JSON response
    private Task parseTaskFromJson(JSONObject json) {
        try {
            String projectId = json.optString("projectId", null);
            String id = json.optString("id", null);
            String name = json.optString("name", null);
            String description = json.optString("description", null);
            String createDate = json.optString("createDate", null);
            String status = json.optString("status", null);
            int timeSpent = json.optInt("timeSpent", 0); // Default value if missing

            if (projectId == null || id == null || name == null || description == null || createDate == null || status == null) {
                throw new IllegalArgumentException("Missing required fields in JSON");
            }

            return new Task(projectId, id, name, description, createDate, status, timeSpent);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public String getStatus() {
        return status;
    }

    public Task getCreatedTask() {
        return createdTask;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            AddTaskModal dialog = new AddTaskModal(null, "project-id-example");
            dialog.setVisible(true);
        });
    }
}
